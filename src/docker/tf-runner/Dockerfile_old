FROM --platform=amd64 python:slim-bookworm

# START ::: vars
ARG GID
ARG UID
ARG ORG_DIR
ARG UTL_PROJ_PATH
ARG APPUSR
ARG APPGRP
ARG DOCKER_HOME
ARG APP_PATH
ARG TF_VERSION

ARG TPG_PROJ_PATH
ARG UTL_PROJ_PATH
ARG INF_PROJ_PATH
ARG CNF_PROJ_PATH
ARG HOME_UTL_PROJ_PATH
ARG HOME_CNF_PROJ_PATH
ARG HOME_INF_PROJ_PATH
ARG HOME_TPG_PROJ_PATH

ENV UTL_PROJ_PATH=$UTL_PROJ_PATH
ENV TPG_PROJ_PATH=$TPG_PROJ_PATH
ENV CNF_PROJ_PATH=$CNF_PROJ_PATH
ENV INF_PROJ_PATH=$INF_PROJ_PATH
ENV HOME_UTL_PROJ_PATH=$HOME_UTL_PROJ_PATH
ENV HOME_TPG_PROJ_PATH=$HOME_TPG_PROJ_PATH
ENV HOME_CNF_PROJ_PATH=$HOME_CNF_PROJ_PATH
ENV HOME_INF_PROJ_PATH=$HOME_INF_PROJ_PATH

ENV PROJ_PATH=$INF_PROJ_PATH
ENV HOME_PROJ_PATH=$HOME_INF_PROJ_PATH

ENV MODULE='tf-runner'
ENV BASE_PATH=$BASE_PATH
ENV ORG=$ORG
ENV ORG_DIR=$ORG_DIR

ENV EDITOR="vim"
ENV APPUSR=$APPUSR
ENV APPGRP=$APPGRP
ENV PS1='`date "+%F %T"` \u@\h  \w \n\n  '
ENV HOME_UTL_PROJ_PATH=$HOME_UTL_PROJ_PATH

ENV DOCKER_HOME=$DOCKER_HOME
ENV HOME_APP_PATH=/home/$APPUSR/$APP_PATH
ENV TF_VERSION=$TF_VERSION
# STOP  ::: vars

# START ::: install OS utils
RUN apt-get update && apt-get install -y --no-install-recommends  \
  perl jq vim wget curl sudo zip unzip make bsdmainutils tzdata git openssh-server openssh-client
# STOP  ::: install  OS utils


# # START ::: install yq
RUN sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \
  && sudo chmod a+x /usr/local/bin/yq
# STOP  ::: install yq



# START ::: install aws cli
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
  && unzip awscliv2.zip \
  && sudo ./aws/install \
  && rm -rf ./aws awscliv2.zip
# STOP  ::: install aws cli

# STOP  ::: install aws cli

# START ::: install terraform and tfswitch
# install tfswitch to handle multiple terraform versions
RUN curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | bash
# STOP  ::: install terraform and tfswitch

#install kubeclt
RUN  curl -LO "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl" && \
  install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && \
  rm kubectl

# START ::: install pip3
RUN wget https://bootstrap.pypa.io/get-pip.py ; sudo python3 get-pip.py ; sudo rm -v get-pip.py

RUN pip3 install --upgrade pip
RUN pip3 install wheel
# STOP  ::: install pip3



# START ::: add-os-user

# START ::: Enable host to container edit of proj code on ubuntu and mac.
RUN test -z $(getent group $GID | cut -d: -f1) || \
  groupmod -g $((GID+1000)) $(getent group $GID | cut -d: -f1)
RUN if getent group $GID; then groupmod -g $((GID+2000)) $(getent group $GID | cut -d: -f1); fi

# create a APPGRP and APPUSR
# START ::: add-os-user
RUN set -x ; groupadd -g "$GID" "$APPGRP" && \
  useradd \
  --gid "$GID" \
  --non-unique \
  --shell "$DOCKER_SHELL" \
  --home-dir "${DOCKER_HOME}" \
  --uid "$UID" \
  --groups "$APPGRP" "$APPUSR" && exit 0 ; exit 1

# create home directory and change its ownership to APPUSR:APPGRP
RUN mkdir -p "/home/$APPUSR" && chown "$APPUSR":"$APPGRP" "/home/$APPUSR"


RUN echo "$APPUSR ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
RUN echo "export PS1=\"$PS1\"" >> $DOCKER_HOME/.bashrc && \
  echo "export EDITOR=\"$EDITOR\"" >> $DOCKER_HOME/.bashrc && \
  echo "cd ${INF_PROJ_PATH}" >> $DOCKER_HOME/.bashrc && \
  echo "export PATH=$DOCKER_HOME/bin:\$PATH" >>$DOCKER_HOME/.bashrc && \
  chown -R $APPUSR:$APPGRP $DOCKER_HOME && \
  chmod -R 0775 $DOCKER_HOME

# START ::: copy-proj-dir
COPY --chown=$APPUSR:$APPGRP . ${HOME_APP_PATH}
# STOP  ::: copy-proj-dir


USER $APPUSR

# STOP  ::: add-os-user



# START  ::: install-poetry

# Set the Poetry version
ENV POETRY_VERSION=1.5.0

# Check if Poetry is installed and install it if necessary
RUN poetry --version >/dev/null 2>&1 \
  && poetry_version=$(poetry --version | sed -n 's/Poetry version \(.*\)/\1/p') \
  && test "$poetry_version" = "$POETRY_VERSION" \
  || (curl -sSL https://install.python-poetry.org | python - \
  && chmod 775 $HOME/.local/share/pypoetry/venv/bin/poetry )

RUN echo 'export PATH=$PATH:$HOME/.local/bin/' >> $HOME/.bashrc

ENV PATH="${PATH}:/home/${APPUSR}/.local/bin/"


# set the default shell as bash and not sh
SHELL ["/bin/bash", "-c"]

# STOP  ::: install-poetry


# Create the 'run' symlink
WORKDIR $HOME_PROJ_PATH
RUN ln -sfn src/bash/run/run.sh run


# STOP  ::: copy-proj-dir




# START ::: install poetry modules in the csi module
RUN find $HOME_PROJ_PATH/src/python/ -name "pyproject.toml" -print0 | \
  while IFS= read -r -d '' f; do \
  tgt_dir=$(dirname "$f"); \
  echo "Working on tgt_dir: $tgt_dir"; \
  cd "$tgt_dir"; \
  if [ ! -z "${MODULE:-}" ] && [[ "$tgt_dir" == *"$MODULE"* ]]; then \
  test -f poetry.lock && rm -vf poetry.lock; \
  test -d .venv && rm -rv .venv; \
  poetry config virtualenvs.create true; \
  poetry install -vvv; \
  if [ $? -ne 0 ]; then \
  echo "FATAL: failed to install $tgt_dir py modules"; \
  exit 1; \
  fi; \
  fi; \
  cd -; \
  done

# STOP  ::: install poetry modules in the csi module


# Workdir is /opt/$org/$PROJ/
WORKDIR $PROJ_PATH
# Add terraform binary to path, otherwise exec cannot find it
# even if we echo into ~/.bashrc or ~/.profile or /etc/profile
ENV PATH=/home/$APPUSR/bin:$PATH

# this fails for some reason and I don't know why and probabluy not neee
# RUN chmod 0775 "$HOME_UTL_PROJ_PATH/src/bash/scripts/docker-init-${MODULE}.sh"

# eof file: csi-wpb-utl/src/docker/tf-runner/Dockerfile.x86_64
